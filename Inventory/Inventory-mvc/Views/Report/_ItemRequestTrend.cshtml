<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.debug.js"></script>
<script src="~/Scripts/chart-colors.js"></script>
<script src="~/Scripts/Chart.PieceLabel.js"></script>

@{
    string category = (string) ViewBag.Category;
    string item = (string) ViewBag.ItemCode;
}

    <input type="hidden" value="@category" name="category" id="category" />
    <input type="hidden" value="@item" name="itemCde" id="itemCode" />

<br />
<a href="#" id="downloadPdf">Download Chart as PDF</a>
<div id="reportPage"><canvas id="myChart"> </canvas></div>

<script>

    var category = $('#category').val(); // to solve situation where ViewBag cannot be retrieved in script
    var itemCode = $('#itemCode').val(); 

    var labels = @Html.Raw(Json.Encode(ViewBag.XLabels));
    var label1 = @Html.Raw(Json.Encode(ViewData["Label1"]));
    var label2 = @Html.Raw(Json.Encode(ViewData["Label2"]));
    var data1 = @Html.Raw(Json.Encode(ViewData["Data1"]));
    var data2 = @Html.Raw(Json.Encode(ViewData["Data2"]));

    var myChart = document.getElementById("myChart").getContext("2d");
    var color = Chart.helpers.color;

    var title = ['Stationery Requisition Trend of ' + itemCode];
    
    if(category != "")
    {
        title.push('in Category: ' + category); 
    }        

    if (data2 == null) // only one year is selected
    {
        var showQtyChart = new Chart("myChart", {
            type: "line",
            data: {
                labels: labels,
                datasets:
                [
                    {
                        label:label1,
                        backgroundColor: window.chartColors.blue,
                        borderColor: window.chartColors.blue,
                        fill:false,
                        strokeColor : "rgba(151,187,205,1)",
                        data: data1,
                    }
                ],
            },
            options:
                {
                    legend:
                    {
                        position: 'right',
                        display: true,
                        labels:
                        {
                            fontColor: window.chartColors.black,
                        }

                    },
                    title:
                    {
                        display: true,
                        fontSize: 16,
                        fontStyle: 'Bold',
                        text: title,
                    },
                    scales:
                    {
                        yAxes:
                        [{
                            scaleLabel:
                            {
                                display: true,
                                labelString: 'Quantity',
                                fontSize: 14,
                            },

                            ticks:
                            {
                                beginAtZero:true,
                            }
                        }],
                        xAxes:
                        [{
                            scaleLabel:
                            {
                                display: true,
                                labelString: 'Months',
                                fontSize: 14,
                            }
                        }]
                    }
                }
        });
    }
    else // 2 years
    {
        var showQtyChart = new Chart("myChart", {
            type: "line",
            data: {
                labels: labels,
                datasets:
                [
                    {
                        label:label1,
                        backgroundColor: color(chartColors.red).alpha(0.2).rgbString(),
                        borderColor: window.chartColors.red,
                        borderDash: [4, 2],
                        fill:true,
                        strokeColor : "rgba(151,187,205,1)",
                        data: data1,
                    },
                    {
                        label:label2,
                        backgroundColor: window.chartColors.blue,
                        borderColor: window.chartColors.blue,
                        fill:true,
                        strokeColor : "rgba(151,187,205,1)",
                        data: data2,
                    },
                ],
            },
            options:
                {
                    legend:
                    {
                        position: 'right',
                        display: true,
                        labels:
                        {
                            fontColor: window.chartColors.black,
                        }

                    },
                    title:
                    {
                        display: true,
                        fontSize: 16,
                        fontStyle: 'Bold',
                        text: title,
                    },
                    scales:
                    {
                        yAxes:
                        [{
                            scaleLabel:
                            {
                                display: true,
                                labelString: 'Quantity'
                            },

                            ticks:
                            {
                                beginAtZero:true,
                            }
                        }],
                        xAxes:
                        [{
                            scaleLabel:
                            {
                                display: true,
                                labelString: 'Months'
                            }
                        }]
                    }
                }
        });
    }


    // Define a plugin to provide data labels
    Chart.plugins.register({
        afterDatasetsDraw: function(chart, easing) {
            // To only draw at the end of animation, check for easing === 1
            var ctx = chart.ctx;

            chart.data.datasets.forEach(function (dataset, i) {
                var meta = chart.getDatasetMeta(i);
                if (!meta.hidden) {
                    meta.data.forEach(function(element, index) {
                        // Draw the text in black, with the specified font
                        ctx.fillStyle = 'rgb(0, 0, 0)';

                        var fontSize = 14;
                        var fontStyle = 'normal';
                        var fontFamily = 'Helvetica Neue';
                        ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);

                        // Just naively convert to string for now
                        var dataString = dataset.data[index].toString();

                        // Make sure alignment settings are correct
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';

                        var padding = 5;
                        var position = element.tooltipPosition();
                        ctx.fillText(dataString, position.x, position.y - (fontSize / 2) - padding);
                    });
                }
            });
        }
    });

    $('#downloadPdf').click(function(event) {
        // get size of report page
        var reportPageHeight = $('#reportPage').innerHeight();
        var reportPageWidth = $('#reportPage').innerWidth();

        // create a new canvas object that we will populate with all other canvas objects
        var pdfCanvas = $('<canvas />').attr({
            id: "canvaspdf",
            width: reportPageWidth,
            height: reportPageHeight
        });

        // keep track canvas position
        var pdfctx = $(pdfCanvas)[0].getContext('2d');
        var pdfctxX = 0;
        var pdfctxY = 0;
        var buffer = 100;

        // for each chart.js chart
        $("canvas").each(function(index) {
            // get the chart height/width
            var canvasHeight = $(this).innerHeight();
            var canvasWidth = $(this).innerWidth();

            // draw the chart into the new canvas
            pdfctx.drawImage($(this)[0], pdfctxX, pdfctxY, canvasWidth, canvasHeight);
            pdfctxX += canvasWidth + buffer;
        });

        // create new pdf and add our new canvas as an image
        var pdf = new jsPDF('l', 'pt', [reportPageWidth, reportPageHeight]);
        pdf.addImage($(pdfCanvas)[0], 'PNG', 50, 50);

        // download the pdf
        pdf.save(title + '.pdf');
    });

</script>
