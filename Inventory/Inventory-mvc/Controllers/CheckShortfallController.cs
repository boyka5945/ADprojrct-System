using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Inventory_mvc.Models;
using Inventory_mvc.Entity;
using Inventory_mvc.Service;
using Inventory_mvc.ViewModel;
using PagedList;


namespace Inventory_mvc.Controllers
{
    public class CheckShortfallController : Controller
    {
        StationeryModel ctx = new StationeryModel();

        IStationeryService stationeryService = new StationeryService();

        IPurchaseOrderService pos = new PurchaseOrderService();

        Dictionary<Purchase_Detail, string> details = new Dictionary<Purchase_Detail, string>();



        public ActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public ActionResult List(int? page)
        {
            //condition for finding items to reorder

            List<StationeryViewModel> model = shortFallList();

            int pageSize = 11;
            int pageNumber = (page ?? 1);
            return View(model.ToPagedList(pageNumber, pageSize));
        }

        [HttpGet]
        public ActionResult AddSelected(string checker)
        {

            List<string> itemCodes = new List<string>();
            List<Purchase_Detail> model = new List<Purchase_Detail>();
            Dictionary<string, string> kv = new Dictionary<string, string>(); //kv pair of itemcode and sggestedqty
            List<StationeryViewModel> modelAll = new List<StationeryViewModel>(); // used if generate all is chosen

            if (checker == "addAll") //add all
            {
                List<StationeryViewModel> items = stationeryService.GetAllStationeryViewModel();
                List<StationeryViewModel> itemsToReorder = items.Where(x => x.StockQty < x.ReorderLevel).ToList();
                foreach(StationeryViewModel svm in itemsToReorder)
                {
                    itemCodes.Add(svm.ItemCode);
                }

                modelAll = shortFallList();

            }

            else
            {
                //list of itemCodes to be reordered
                itemCodes = Request.QueryString.AllKeys.ToList();
                
                foreach (string s in itemCodes) {

                    string v = Request.QueryString.GetValues(s).First();
                    kv.Add(s, v);

                        }
                
            }
            
            ////might need to remove
            //if (Session["detailsBundle"] != null)
            //{
            //    details = (Dictionary<Purchase_Detail, string>)Session["detailsBundle"];
            //    model = details.Keys.ToList<Purchase_Detail>();

            //}

            foreach (string i in itemCodes)
            {
                //takes the price of the first/default supplier
                Stationery s = ctx.Stationeries.Where(x => x.itemCode == i).First();
                decimal price = s.price;
                int qtyToReorder;

                //find qty to reorder
                if (checker == "addAll")
                {
                    StationeryViewModel svm = modelAll.Where(x => x.ItemCode == i).First();
                    qtyToReorder = svm.Suggested;

                }
                else
                {
                    qtyToReorder = Int32.Parse(kv[i]);
                }
                Purchase_Detail pd = new Purchase_Detail();
                pd.orderNo = findNextOrderNo();
                pd.itemCode = i;
                pd.qty = qtyToReorder;
                pd.price = price;
                pd.remarks = String.Format("autogenerated from shortfall list on {0}", DateTime.Now.ToString());
                model.Add(pd);
                //find the default supplier

                string defaultSupplier = ctx.Stationeries.Where(x => x.itemCode == i).First().firstSupplierCode;

                details.Add(pd, defaultSupplier);
                

            }

            
            Session["detailsBundle"] = details;
            //to obtain latest order number
            int orderNo = findNextOrderNo();
            ViewBag.orderNo = orderNo;

            ViewBag.itemCodeList = stationeryService.GetAllItemCodes();
            //return View("~/Views/Purchase/RaisePurchaseOrder.cshtml", model);
 

            return RedirectToAction("RaisePurchaseOrder", "Purchase", model);
        }



        //helper method
        public int findNextOrderNo()
        {
            using (StationeryModel Entity = new StationeryModel())
            {
                int maxOrderNo = 0;
                //to obtain highest order number
                List<Purchase_Order_Record> pds = Entity.Purchase_Order_Records.ToList();
                foreach (Purchase_Order_Record p in pds)
                {
                    maxOrderNo = 1;
                    if (p.orderNo > maxOrderNo)
                    {
                        maxOrderNo = p.orderNo;
                    }

                }

                return maxOrderNo + 1;
            }

        }

        //very important helper method
        public List<StationeryViewModel> shortFallList()
        {
            //condition for finding items to reorder
            List<StationeryViewModel> items = stationeryService.GetAllStationeryViewModel();
            List<StationeryViewModel> model = items.Where(x => x.StockQty < x.ReorderLevel).ToList(); //TO DO: USE THE SERVICE METHOD 

            //calculating the suggested qty to order per item
            foreach (StationeryViewModel s in model)
            {
                //suggsted = requested qty(from user) still outstanding + reorder level - qty alrdy ordered
                string itemCode = s.ItemCode;
                int requestQty = 0;
                int purchasedAndPendingQty = 0;
                int suggested;
                List<Requisition_Detail> userRequests = ctx.Requisition_Detail.Where(x => x.itemCode == itemCode && x.qty.Value > (x.fulfilledQty ?? 0)).ToList();

                foreach (Requisition_Detail rd in userRequests)
                {
                    requestQty += (rd.qty.Value - (rd.fulfilledQty ?? 0));
                }

                int diffBetweenQtyAndMin = s.ReorderLevel - s.StockQty;



                List<Purchase_Detail> existingPurchases = ctx.Purchase_Detail.Where(x => x.itemCode == itemCode && x.qty > (x.fulfilledQty ?? 0)).ToList();


                foreach (Purchase_Detail pd in existingPurchases)
                {
                    purchasedAndPendingQty += (pd.qty - pd.fulfilledQty ?? 0);
                }

                suggested = requestQty + (s.ReorderLevel - s.StockQty) - purchasedAndPendingQty;

                s.Suggested = suggested;



            }
            return model;
        }
    }
}