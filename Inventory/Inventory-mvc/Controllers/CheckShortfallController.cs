using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Inventory_mvc.Models;
using Inventory_mvc.Entity;
using Inventory_mvc.Service;
using Inventory_mvc.ViewModel;
using PagedList;


namespace Inventory_mvc.Controllers
{
    public class CheckShortfallController : Controller
    {
        StationeryModel ctx = new StationeryModel();

        IStationeryService stationeryService = new StationeryService();

        IPurchaseOrderService pos = new PurchaseOrderService();

        Dictionary<Purchase_Detail, string> details = new Dictionary<Purchase_Detail, string>();

        public ActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public ActionResult List(int? page)
        {
            List<StationeryViewModel> items = stationeryService.GetAllStationeryViewModel();
            List<StationeryViewModel> model = items.Where(x => x.StockQty < x.ReorderLevel).ToList();


            int pageSize = 20;
            int pageNumber = (page ?? 1);
            return View(model.ToPagedList(pageNumber, pageSize));
        }

        [HttpGet]
        public ActionResult AddSelected(string checker)
        {

            List<string> itemCodes = new List<string>();
            List<Purchase_Detail> model = new List<Purchase_Detail>();

            if (checker == "addAll") //add all
            {
                itemCodes = stationeryService.GetAllStationeryViewModel().Select(x => x.ItemCode).ToList();


            }

            else
            {
                //list of itemCodes to be reordered
                itemCodes = Request.QueryString.AllKeys.ToList();
            }
            
            //might need to remove
            if (Session["detailsBundle"] != null)
            {
                details = (Dictionary<Purchase_Detail, string>)Session["detailsBundle"];
                model = details.Keys.ToList<Purchase_Detail>();

            }

            foreach (string i in itemCodes)
            {
                //takes the price of the first/default supplier
                Stationery s = ctx.Stationeries.Where(x => x.itemCode == i).First();
                decimal price = s.price;
                //find qty to reorder
                int qtyToReorder = 0;
                if(s.reorderQty < (s.reorderLevel - s.reorderQty))
                {
                    qtyToReorder = s.reorderLevel - s.reorderQty;
                }
                else
                {
                    qtyToReorder = s.reorderQty;
                }

                Purchase_Detail pd = new Purchase_Detail();
                pd.orderNo = findNextOrderNo();
                pd.itemCode = i;
                pd.qty = qtyToReorder;
                pd.price = price;
                pd.remarks = String.Format("autogenerated from shortfall list on {0}", DateTime.Now.ToString());
                model.Add(pd);
                //find the default supplier

                string defaultSupplier = ctx.Stationeries.Where(x => x.itemCode == i).First().firstSupplierCode;

                details.Add(pd, defaultSupplier);
                

            }

            
            Session["detailsBundle"] = details;
            //to obtain latest order number
            int orderNo = findNextOrderNo();
            ViewBag.orderNo = orderNo;

            return View("~/Views/Purchase/RaisePurchaseOrder.cshtml", model);
        }



        //helper method
        public int findNextOrderNo()
        {
            using (StationeryModel Entity = new StationeryModel())
            {
                int maxOrderNo = 0;
                //to obtain highest order number
                List<Purchase_Order_Record> pds = Entity.Purchase_Order_Records.ToList();
                foreach (Purchase_Order_Record p in pds)
                {
                    maxOrderNo = 1;
                    if (p.orderNo > maxOrderNo)
                    {
                        maxOrderNo = p.orderNo;
                    }

                }

                return maxOrderNo + 1;
            }

        }
    }
}